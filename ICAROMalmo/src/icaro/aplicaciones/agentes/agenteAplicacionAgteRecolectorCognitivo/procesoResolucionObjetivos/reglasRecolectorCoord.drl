import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionrobotIgualitarioNCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionrobotIgualitarioNCognitivo.objetivos.*;
import icaro.aplicaciones.agentes.agenteAplicacionrobotIgualitarioNCognitivo.tareas.*;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionAgteRecolectorCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionAgteRecolectorCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionAgteRecolectorCognitivo.objetivos.*;

import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.

rule "Acciones Iniciales"
 when
    not ( exists(Focus()))
    not ( exists(MisObjetivos()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMemAlum.class);
   tarea1.ejecutar(VocabularioRosace.IdentRolAgtesRecolectorCoord);           
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end

rule "Generacion Objetivo Conocer MiEquipo "
// Se genera al principio de la simulacion 
when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    miStatus: RobotStatusMoic(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
 then
    DefinirMiEquipo definirMiequipoObj = new DefinirMiEquipo(VocabularioRosace.IdentMisionEquipo);
 //se genera y se focaliza
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(definirMiequipoObj,misObjs,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio consecucion Objetivo Conocer MiEquipo "
// Consecucion Objetivo Conocer mi equipo
when   
    miEquipo: InfoEquipoMoic(inicioContactoConEquipo== false)
    miStatus: RobotStatusMoic(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
//    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
//    tarea.ejecutar(miStatus,miEquipo); 
// Las dos formas de ejecutar tareas son equivalentes
    gestorTareas.ejecutar(ContactarMiembrosEquipo.class,miStatus,miEquipo );
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio consecucion Objetivo Conocer MiEquipo cuando me lo pidan "
when   
    miEquipo: InfoEquipoMoic(inicioContactoConEquipo== false)
    miStatus: RobotStatusMoic(idRobot == agentId)
    peticionAgte:PeticionAgente(mensajePeticion== "msgPeticionRol") // Poner el mensaje definido en el VocabularioRosace
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// Las dos formas de ejecutar tareas son equivalentes
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
    tarea.ejecutar(miStatus,miEquipo); 
 //   gestorTareas.ejecutar(ContactarMiembrosEquipo.class,miStatus,miEquipo );
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipoMoic(idTeam:teamId,inicioContactoConEquipo== true)
    infoRolRecibido: InfoRolAgente(identEquipoAgte == idTeam)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
 end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera
rule "Proceso timeout para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipoMoic(idTeam:teamId,inicioContactoConEquipo== true)
    misObjs: MisObjetivos()
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirObjetivoActualizarFoco.class);
    tarea.ejecutar(misObjs,obj1,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end

//Cuando se resuelve la definicion del equipo salta
rule "Obtencion de informacion del entorno"
when
	mensajeMalmo: MensajeSimple(VocabularioRosace.MalmoListo == contenido)
	obj: DefinirMiEquipo(state == Objetivo.SOLVED)
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirInformacionDelEntorno.class);
	tarea.ejecutar();
	retract(mensajeMalmo);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

//Basicamente inicializamos el robotstatusMoic
rule "Inicializar mi RobotStatusMoic(Obtener mi informacion)"
when
   	obj:RecolectarTodasLasManzanas();
   	robotStatusMoic : RobotStatusMoic(inicializado == false);
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarRobotStatusMoic.class);
	tarea.ejecutar(robotStatusMoic);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Focalizar objetivo de recolectar todas las manzanas"
when
	obj:RecolectarTodasLasManzanas(state == Objetivo.PENDING);
	misObj: MisObjetivos();
	foco : Focus();
	robotStatusMoic: RobotStatusMoic();
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
	tarea.ejecutar(obj, misObj, foco);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Generacion objetivo de recolectar manzana"
when
	obj: RecolectarTodasLasManzanas(state == Objetivo.SOLVING);
	foco : Focus(foco == obj);
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoRecolectarManzana.class);
	tarea.ejecutar(obj,foco);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Obtencion de coste de completar la recoleccion de manzana"
when
	obj: RecolectarManzana(id: id);
	objDec: DecidirQuienVa(objectDecisionId == id);
	info: InfoDecidirRecolector(ObjetivoID == id, todasLasPeticiones == false );
	infoEquipo: InfoEquipoMoic();
	Focus(foco == objDec); 
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionATodos.class);
	tarea.ejecutar(obj, info, infoEquipo);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Proceso una respuesta para la recoleccion de manzanas"
when
	obj: RecolectarManzana(id: id);
	objDec: DecidirQuienVa(objectDecisionId == id);
	info: InfoDecidirRecolector(ObjetivoID == id);
	respuesta: RespuestaRecoleccion(objetivoID == id);
	Focus(foco == objDec);
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarRespuestaRecoleccion.class);
	tarea.ejecutar(info, respuesta);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Primer timeout para obtencion de todos los costes de reccolectar manzana"
when
	obj: RecolectarManzana(id: id);
	objDec: DecidirQuienVa(objectDecisionId == id);
	info: InfoDecidirRecolector(ObjetivoID == id, todasLasRespuestas == false, todasLasPeticiones == true);
	infoEquipo: InfoEquipoMoic();
	Focus(foco == objDec);
	informeTarea:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==id );
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionRestantes.class);
	tarea.ejecutar(obj, info, infoEquipo, informeTarea);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
/*
rule "Segundo timeout para obtencion de todos los costes de reccolectar manzana"
when
	obj: RecolectarManzana(id: id);
	objDec: DecidirQuienVa(objectDecisionId == id);
	info: InfoDecidirRecolector(ObjetivoID == id, todasLasRespuestas == false, todasLasPeticiones == true);
	infoEquipo: InfoEquipoMoic();
	Focus(foco == objDec);
	informeTarea:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==id );
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(PeticionRecolectarManzana.class);
	tarea.ejecutar(obj, objDec, info);
	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
*/
rule "Seleccion del agente con menor coste para recolectar la manzana"
when
	obj: RecolectarManzana(id: id);
	objDec: DecidirQuienVa(objectDecisionId == id);
	info: InfoDecidirRecolector(ObjetivoID == id, todasLasRespuestas == true);
	infoEquipo: InfoEquipoMoic();
	foco: Focus(foco == objDec);
	obj2: RecolectarTodasLasManzanas();
	//informeTarea:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==id );
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(PeticionRecolectarManzana.class);
	tarea.ejecutar(obj, objDec, info, foco, obj2);
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
/*
rule "Resolucion del objetivo recolectar manzana por el agente"
when
	obj: RecolectarTodasLasManzanas();
	//mensaje de que se completo cierta manzana
then
	//no lleva tarea, lo hacemos aqui directamente.
	modify{
		obj.setRecolectada(id);
	}
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     

end*/
//Regla del calculo de la evaluacion
rule "Calculo mi evaluacion de recolectarManzana"
when
	miStatus : RobotStatusMoic();
	infoEquipo : InfoEquipoMoic();
	peticion : PeticionRecoleccion();
then
TareaSincrona tarea = gestorTareas.crearTareaSincrona(CalcularEvaluacion.class);
	tarea.ejecutar(peticion,miStatus,infoEquipo);
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end

//Regla de recepcion de recoger manzana. 
rule "Proceso peticion de recoleccion de manzana"
when
	peticion : PropuestaAgente(mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo)
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConsecucionObjetivoRecoleccion.class);
	tarea.ejecutar(peticion);
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     

end
